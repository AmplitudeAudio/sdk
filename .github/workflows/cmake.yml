name: Build CMake Project

on:
  workflow_call:
    inputs:
      project-path:
        required: true
        type: string

jobs:
  build:
    name: "[${{ matrix.build_type }}] ${{ matrix.config.name }}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [ "release", "debug" ]
        config:
          - name: "Windows Latest MSVC"
            key: msvc
            os: windows-latest
            sdk_dir: win
            artifact: "amplitude_audio_sdk_windows_msvc_x64.7z"
            cc: "cl"
            cxx: "cl"
            generator: "Visual Studio 17 2022"
            target_triplet: x64-windows

          - name: "Windows Latest MinGW"
            key: mingw
            os: windows-latest
            sdk_dir: win
            artifact: "amplitude_audio_sdk_windows_mingw_x64.7z"
            cc: "gcc"
            cxx: "g++"
            generator: "Ninja"
            target_triplet: x64-mingw-static

          - name: "Ubuntu Latest GCC"
            key: gcc
            os: ubuntu-latest
            sdk_dir: linux
            artifact: "amplitude_audio_sdk_linux_gcc_x64.7z"
            cc: "gcc"
            cxx: "g++"
            generator: "Ninja"
            target_triplet: x64-linux

          - name: "macOS x64 Latest Clang"
            key: clang
            os: macos-latest
            sdk_dir: osx
            artifact: "amplitude_audio_sdk_macos_clang_x64.7z"
            cc: "clang"
            cxx: "clang++"
            generator: "Ninja"
            target_triplet: x64-osx

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11.2
        with:
          vcpkgGitCommitId: 9f03078bdcbab3ad8c1e3927c40c3fb48e42501f

      - name: Find flatc version
        if: startsWith(matrix.config.os, 'ubuntu') || startsWith(matrix.config.os, 'macos')
        id: flatc_version
        uses: tdemin/find-latest-tag@v1
        with:
          repo: https://github.com/google/flatbuffers.git

      - name: Install dependencies on Windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake curl
          ninja --version
          cmake --version
          $FLATC_VERSION = "$(curl "https://api.github.com/repos/google/flatbuffers/releases/latest" --ssl-no-revoke --silent | Select-String -Pattern '"tag_name":\s*"(.+)"')" -replace '.*"v(.+)".*','$1'
          echo "flatc download latest v$FLATC_VERSION version"
          iwr -Uri https://github.com/google/flatbuffers/releases/download/v$FLATC_VERSION/Windows.flatc.binary.zip -OutFile flatc.zip
          mkdir bin
          Expand-Archive -Force flatc.zip .\bin\
          .\bin\flatc --version

      - name: Install dependencies on Windows (MingW)
        if: startsWith(matrix.config.os, 'windows') && startsWith(matrix.config.key, 'mingw')
        run: choco upgrade mingw

      - name: Install dependencies on Ubuntu
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version
          wget https://github.com/google/flatbuffers/releases/download/${{ steps.flatc_version.outputs.tag }}/Linux.flatc.binary.g++-10.zip
          mkdir bin
          sudo unzip Linux.flatc.binary.g++-10.zip -d bin
          ./bin/flatc --version

      - name: Install dependencies on MacOS
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install p7zip cmake ninja
          ninja --version
          cmake --version
          wget https://github.com/google/flatbuffers/releases/download/${{ steps.flatc_version.outputs.tag }}/Mac.flatc.binary.zip
          mkdir bin
          sudo unzip Mac.flatc.binary.zip -d bin
          ./bin/flatc --version

      - name: Restore SDK Cache
        uses: actions/cache/restore@v3
        with:
          enableCrossOsArchive: true
          path: sdk
          key: ${{ matrix.build_type }}-${{ matrix.config.artifact }}-${{ hashFiles('**/sdk') }}
          restore-keys: |
            ${{ matrix.build_type }}-${{ matrix.config.artifact }}-

      - name: Configure
        shell: bash
        working-directory: ${{ inputs.project-path }}
        run: |
          mkdir build
          cmake \
            -S . \
            -B build \
            -G "${{ matrix.config.generator }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE:STRING="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET:STRING="${{ matrix.config.target_triplet }}" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE \
            -DBUILD_SAMPLES:BOOL=TRUE

      - name: Build
        shell: bash
        working-directory: ${{ inputs.project-path }}/build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Install Strip
        shell: bash
        working-directory: ${{ inputs.project-path }}/build
        run: cmake --install . --strip --config ${{ matrix.build_type }}

      - name: Copy flatc to SDK folder (Windows)
        if: startsWith(matrix.config.os, 'windows')
        run: |
          Copy-Item .\bin\flatc.exe -Destination .\sdk\bin\${{ matrix.config.sdk_dir }}

      - name: Copy flatc to SDK folder (Unix)
        if: startsWith(matrix.config.os, 'ubuntu') || startsWith(matrix.config.os, 'macos')
        run: |
          cp ./bin/flatc ./sdk/bin/${{ matrix.config.sdk_dir }}

      - name: Save SDK Cache
        uses: actions/cache/save@v3
        id: cache
        with:
          enableCrossOsArchive: true
          path: sdk
          key: ${{ matrix.build_type }}-${{ matrix.config.artifact }}-${{ hashFiles('**/sdk') }}
