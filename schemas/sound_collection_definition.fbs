// Copyright (c) 2021-present Sparky Studios. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace SparkyStudios.Audio.Amplitude;

// Specify the 3D spatialization to apply on the sound.
// - None: Sounds are always played at their regular gain.
// - Position: Sounds have their gain adjusted based on the attenuator.
// - PositionOrientation: Sounds have their gain adjusted based on the attenuator and the collider.
enum Spatialization: byte {
  None,
  Position,
  PositionOrientation,
}

// Scopes allow specifying how playback data are shared between each instance
// of this sound collection.
// - World: All instances of the sound collection will be treated as one object so
// that the repetition across entities is avoided.
// - Entity: Each instance of the sound collection will be treated as a single object
// and therefore no data will be shared across entities.
enum Scope: byte {
  World,
  Entity,
}

// PlayModes are the way the sound collection is played when a play request is received.
// - PlayOne: On each play request, an audio sample is picked by the scheduler and played only once.
// - LoopOne: On each play request, an audio sample is picked by the scheduler and looped until stopped.
// - PlayAll: On each play request, an audio sample is picked by the scheduler and played once. This task
// is repeated until all the audio samples are picked.
// - LoopAll: On each play request, an audio sample is picked by the scheduler and played once. This mode
// will play all the audio samples and once until stopped.
enum PlayMode: byte {
  PlayOne,
  LoopOne,
  PlayAll,
  LoopAll,
}

// A sound scheduler mode is a way for the sound collection to pick a sound
// from the list of audio samples on each play request.
// - Random: An audio sample is randomly selected from the list each time
// a play request is made on the sound collection.
// - Sequence: Audio samples are sequentially selected from the list each
// time a play request is made on the sound collection.
enum SoundSchedulerMode: byte {
  Random,
  Sequence,
}

// Describes the behavior of the Sequence scheduler when reaching the end of the sound collection
// - Restart: The scheduler restarts the sound collection at the first item.
// - Reverse: The scheduler play the sound collection in reverse order. The last and first sounds
// are not played twice.
enum SequenceSoundSchedulerEndBehavior: byte {
  Restart,
  Reverse,
}

// Random Scheduler configuration.
table RandomSoundSchedulerConfig {
  // Avoids to pick a sound from the list of audio samples before
   // the last n audio samples played, where n is the repeat count.
  avoid_repeat:bool = false;

  // Specifies the number of audio samples which should be played
  // before others can be repeated.
  repeat_count:uint = 1;
}

// Sequence Scheduler configuration.
table SequenceSoundSchedulerConfig {
  // Specifies the behavior of the Sequence scheduler when reaching
  // the end of the sound collection.
  end_behavior:SequenceSoundSchedulerEndBehavior;
}

// Union type for schedulers configuration.
union SoundSchedulerConfig {
  Random:RandomSoundSchedulerConfig,
  Sequence:SequenceSoundSchedulerConfig
}

// Configures the sound collection schedule
table SoundSchedulerSettings {
  // The scheduler mode to use when playing an audio sample of this collection.
  mode:SoundSchedulerMode = Random;

  // Configuration for the selected scheduler.
  config:SoundSchedulerConfig;
}

// Reference to audio data (a sample) and basic attributes that affect its
// playback at runtime.
table AudioSample {
  // Linear gain (0.0 .. 1.0) of the sample when played back by the audio
  // system.
  gain:float = 1.0;

  // String identifier for the sample.
  filename:string;
}

// Entry in a set of AudioSample objects.
table AudioSampleSetEntry {
  // Probability of this sample being selected to relative to others in a set.
  // Only used when the "random" scheduler is used.
  playback_probability:float = 1.0;

  // Sample associated with this set entry.
  audio_sample:AudioSample;
}

// Basic triggered sound object.
table SoundCollectionDefinition {
  // Identifier for the sound that can be referenced by other objects.
  name:string;

  // Priority of this sound relative to all other Sound objects. If the
  // application requests the playback of more Sound objects than playback
  // channels available in the system, only the highest priority Sounds are
  // played back.
  priority:float = 1.0;

  // Overall linear gain (0.0 .. 1.0) of the sound when played back by the audio
  // system.
  gain:float = 1.0;

  // Name of the bus this sound should be played on.
  bus:string;

  // Set of samples from which a weighted random selection is performed to
  // determine which sample to play when Sound playback is triggered.
  audio_sample_set:[AudioSampleSetEntry];

  // Whether this sound should be streamed or loaded into a buffer.
  // Generally music is streamed and sound effects are loaded into a buffer.
  stream:bool = false;

  // Whether this sound should grow louder or quieter based on distance.
  // NonPositional sounds are always played at their regular gain.
  // Positional sounds have their gain adjusted based on the distance to a
  // listener.
  spatialization:Spatialization = None;

  // Defines the play mode of this sound. The play mode set the way audio samples
  // of this sound are played. The default is PlayOne.
  play_mode:PlayMode = PlayOne;

  // Defines the behavior of the sound scheduler of this collection.
  scheduler:SoundSchedulerSettings;

  // The scope where to apply this sound collection. The default is World.
  scope:Scope = World;

  // The minimum or maximum distance from which this sound can be heard. This
  // only applies to spatial sounds.
  min_audible_radius:float = 0.0;
  max_audible_radius:float = 0.0;

  // When the distance between the listener and the sound source is between the
  // min_audible_radius and the roll_in_radius or between the roll_out_radius
  // and the max_audbile_radius attenuation will be applied based on the
  // distance.
  roll_in_radius:float = 0.0;
  roll_out_radius:float = 0.0;

  // The curve factor can be adjusted based on how rapidly the attenuation
  // should change with distance.
  //
  // A curve factor of 1.0 means the attenuation will adjust linearly with
  // distance.
  //
  // A curve factor greater than 1.0 means the attenuation will change gently
  // at first, then rapidly approach its target.
  //
  // A fractional curve factor between 0.0 and 1.0 means the attenuation will
  // change rapidly at first, then gently approach its target.
  roll_in_curve_factor:float = 2.0;
  roll_out_curve_factor:float = 0.5;
}

root_type SoundCollectionDefinition;

file_identifier "AMSC";
file_extension "amsound";
