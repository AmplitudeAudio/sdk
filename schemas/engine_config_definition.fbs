// Copyright (c) 2021-present Sparky Studios. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace SparkyStudios.Audio.Amplitude;

// The supported output channels.
enum PlaybackOutputChannels : ushort {
  Default = 0,
  Mono = 1,
  Stereo = 2,
  Quad = 4,
  Surround_5_1 = 6,
  Surround_7_1 = 8
}

// The supported output formats.
enum PlaybackOutputFormat : ushort {
  Default = 0,
  UInt8 = 1,
  Int16 = 2,
  Int24 = 3,
  Int32 = 4,
  Float32 = 5,
}

/// Defines how the engine should fetch for the best listener.
enum ListenerFetchMode : ushort {
  /// Do not fetch for listeners. This mute all audio, but keeps processing data.
  None = 0,

  /// Fetches for the nearest listener to the currently processed sound. This imply
  /// that different listeners can be returned for different sounds.
  Nearest,

  /// Fetches for the farest listener to the currently processed sound. This imply
  /// that different listeners can be returned for different sounds.
  Farest,

  /// Fetches for the default listener set by the engine. This ensures
  /// that only one listener is used everytime.
  ///
  /// The default listener should be set using Engine::SetDefaultListener().
  /// If no listener is set to default, the behavior is the same as ListenerFetchMode::None.
  /// If the listener set as default is next removed, the behavior will be the same as
  /// ListenerFetchMode::None, until another default listener is set.
  Default,

  /// Fetches for the first available listener. This ensures
  /// that only one listener is used everytime.
  First,

  /// Fetches for the last available listener. This ensures
  /// that only one listener is used everytime.
  Last,
}

// Playback device configuration
table PlaybackOutputConfig {
  // Output sampling frequency in samples per second.
  frequency:uint;

  // The number of output channels to support.
  channels:PlaybackOutputChannels = Stereo;

  // Bytes used per output sample.
  buffer_size:uint;

  // The output buffer format.
  format:PlaybackOutputFormat = Default;
}

// Audio mixer configuration
table AudioMixerConfig {
  // The number of active audio mixer channels to allocate.
  active_channels:uint;

  // The number of virtuals audio mixer channels to allocate
  // in addition to the active channels. Mixing does not occur
  // on virtual channels, but information about the channel is
  // still tracked.
  virtual_channels:uint;
}

/// Game synchronization configuration
table GameSyncConfig {
  /// Defines how the engine should fetch the best listener for an audio.
  listener_fetch_mode:ListenerFetchMode = Nearest;

  /// The number of listeners to allocate.
  listeners:uint = 1;

  /// The number of entities to allocate.
  entities:uint = 4096;
}

table EngineConfigDefinition {
  // Configures the playback device.
  output:PlaybackOutputConfig;

  // Configures the audio mixer.
  mixer:AudioMixerConfig;

  /// Configures the game sync.
  game:GameSyncConfig;

  // The location of the buses definition file.
  buses_file:string;

  // The name of the audio driver to use.
  // If empty, or the given driver name is not registered,
  // the default driver will be used instead.
  driver:string;
}

root_type EngineConfigDefinition;

file_identifier "AMEC";
file_extension "amconfig";
