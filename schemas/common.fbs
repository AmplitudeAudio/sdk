// Copyright (c) 2021-present Sparky Studios. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace SparkyStudios.Audio.Amplitude;

/// Specifies the 3D spatialization to apply on the sound.
enum Spatialization: byte {
  /// Sounds are always played at their regular gain.
  None,
  /// Sounds have their gain adjusted based on the attenuation.
  Position,
  /// Sounds have their gain adjusted based on the attenuation and following their orientation.
  PositionOrientation,
}

/// Scopes allow specifying how playback data are shared between each instance
/// of collections.
enum Scope: byte {
  /// All instances of the collection will be treated as one object so
  /// that the repetition across entities is avoided.
  World,
  /// Each instance of the collection will be treated as a single object
  /// and therefore no data will be shared across entities.
  Entity,
}

/// Faders allow to progressively update a value
/// to a given target during the specified period of time.
enum FaderAlgorithm: byte {
  /// Fades linearly from the initial value to the final value.
  Linear = 0,
  /// Keeps returning the initial value until the transition is complete.
  Constant = 1,
  /// Returns values using an S-shaped curve from the initial value to the final value.
  S_Curve = 2,
  /// Returns values using an exponential growth algorithm from the initial value to the final value.
  Exponential = 3,
}

/// A point coordinates in a curve.
struct CurvePointDefinition {
  x:double;
  y:float;
}

/// A part of a curve. This is materialized by a start point, an end point,
/// and the fader algorithm between them.
struct CurvePartDefinition {
  /// The curve part start point.
  start:CurvePointDefinition;

  /// The curve part end point.
  end:CurvePointDefinition;

  /// The fader algorithm.
  fader:FaderAlgorithm = Linear;
}

/// A curve. Mainly used by attenuators.
table CurveDefinition {
  /// The parts of the curve.
  parts:[CurvePartDefinition];
}

/// Defines the settings fo a fade transition.
table FadeTransitionSettings {
  /// The transition duration in seconds.
  duration:double = 0;

  /// The fader algorithm to use during the transition.
  fader:FaderAlgorithm = Linear;
}
